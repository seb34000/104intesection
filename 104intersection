#!/usr/bin/env python3

import sys
import math

def printf(format, *args):
    sys.stdout.write(format % args)

def get_help():
    printf("USAGE\n")
    printf("\t./104intersection opt xp yp zp xv yv zv p\n\n")
    printf("DESCRIPTION\n")
    printf("\topt\topt surface option: 1 for a sphere, 2 for a cylinder, 3 for a cone\n")
    printf("\t(xp, yp, zp)\tcoordinates of a point by which the light ray passes through\n")
    printf("\t(xv, yv, zv)\tc coordinates of a vector parallel to the light ray\n")
    printf("\tp\tparameter: radius of the sphere, radius of the cylinder, or\n")
    printf("\t\tangle formed by the cone and the Z-axis\n")

def next_print(a, b, c, delta, xp, yp, zp, xv, yv, zv, p):
    if delta < 0:
        printf("No intersection point.\n")
    if delta == 0:
        printf("1 intersection point:\n")
        x = - b / (2 * a)
        xi = xp + x * xv
        yi = yp + x * yv
        zi = zp + x * zv
        printf("(%.3f, %.3f, %.3f)\n", xi, yi, zi)
    if delta > 0:
        printf("2 intersection points:\n")
        x1 = (-b - math.sqrt(delta)) / (2 * a)
        x2 = (-b + math.sqrt(delta)) / (2 * a)
        xp1 = (xp) + x1 * (xv)
        yp1 = (yp) + x1 * (yv)
        zp1 = (zp) + x1 * (zv)
        xp2 = (xp) + x2 * (xv)
        yp2 = (yp) + x2 * (yv)
        zp2 = (zp) + x2 * (zv)
        printf("(%.3f, %.3f, %.3f)\n", xp2, yp2, zp2)
        printf("(%.3f, %.3f, %.3f)\n", xp1, yp1, zp1)


def sphere(xp, yp, zp, xv, yv, zv, p):
    a = math.pow(xv, 2) + math.pow(yv, 2) + math.pow(zv, 2)
    if a == 0 :
        sys.exit(84)
        return(84)
    b = 2 * xp * xv + 2 * yp * yv + 2 * zp * zv
    c = math.pow(xp, 2) + math.pow(yp, 2) + math.pow(zp, 2) - math.pow(p, 2)
    delta = math.pow(b, 2) - 4 * a * c
    next_print(a, b, c, delta, xp, yp, zp, xv, yv, zv, p)


def cylinder(xp, yp, zp, xv, yv, zv, p):
    a = math.pow(xv, 2) + math.pow(yv, 2)
    b = 2 * xp * xv + 2 * yp * yv
    c = math.pow(xp, 2) + math.pow(yp, 2) - math.pow(p , 2)
    if a == 0 :
        if zv == 0 :
            sys.exit(84)
            return (84)
        else : 
            if c == 0 : 
                printf("There is an infinite number of intersection points.\n")
                return (0)
    delta = math.pow(b, 2) - 4 * a * c
    next_print(a, b, c, delta, xp, yp, zp, xv, yv, zv, p)


def connes(xp, yp, zp, xv, yv, zv, p):
    p = math.radians(p)
    a = math.pow(xv,2) + math.pow(yv,2) - math.pow((zv * math.tan(p)), 2)
    if a == 0 :
        sys.exit(84)
        return(84)
    b = 2 * xp * xv + 2 * yp * yv - 2 * zp * zv * math.pow(math.tan(p), 2)
    c = math.pow(xp,2) + math.pow(yp,2) - math.pow(zp,2) * math.pow(math.tan(p),2)
    delta = math.pow(b, 2) - 4 * a * c
    next_print(a, b, c, delta, xp, yp, zp, xv, yv, zv, p)

def main():
    try:
        i = 9
        if sys.argv[i]:
            printf("Error: Too many argument\n")
            sys.exit(84)
            return 84
    except IndexError:
        i = 0

    try: 
        if (sys.argv[1] == '-h'):
            get_help()
            sys.exit(84)
            return 84
    except IndexError:
        printf("Error: See -h option if you need help\n")
        sys.exit(84)
        return 84

        
    try:
        opt = sys.argv[1]
        xp = sys.argv[2]
        yp = sys.argv[3]
        zp = sys.argv[4]
        xv = sys.argv[5]
        yv = sys.argv[6]
        zv = sys.argv[7]
        p = sys.argv[8]
    except IndexError:
        printf("Error: See -h option if you need help\n")
        sys.exit(84)
        return 84
    
    try:
        opt = int(sys.argv[1])
        xp = int(sys.argv[2])
        yp = int(sys.argv[3])
        zp = int(sys.argv[4])
        xv = int(sys.argv[5])
        yv = int(sys.argv[6])
        zv = int(sys.argv[7])
        p = int(sys.argv[8])
    except ValueError:
        printf("Error: See -h option if you need help\n")
        sys.exit(84)
        return 84

    if (opt == 1):
        printf("Sphere of radius %d\n", p)
        printf("Line passing through the point (%d, %d, %d) and parallel to the vector (%d, %d, %d)\n", xp, yp, zp, xv, yv, zv)
        sphere(xp, yp, zp, xv, yv, zv, p)
    if (opt == 2):
        printf("Cylinder of radius %d\n", p)
        printf("Line passing through the point (%d, %d, %d) and parallel to the vector (%d, %d, %d)\n", xp, yp, zp, xv, yv, zv)
        cylinder(xp, yp, zp, xv, yv, zv, p)
    if (opt == 3):
        printf("Cone with a %d degree angle\n", p)
        printf("Line passing through the point (%d, %d, %d) and parallel to the vector (%d, %d, %d)\n", xp, yp, zp, xv, yv, zv)
        connes(xp, yp, zp, xv, yv, zv, p)
    if (opt != 1 and opt != 2 and opt != 3):
        printf("Error: See -h option if you need help\n")
        sys.exit(84)
        return 84

main()